* Table of content :TOC:
- [[#ui-tweaks-and-customization][UI tweaks and customization]]
  -  [[#no-menu-bar][No menu bar]]
  -  [[#no-tools-bar][No tools bar]]
  -  [[#no-scroll-bars][No scroll bars]]
  -  [[#no-tab-bar][No tab bar]]
  - [[#splash-screen-and-scratch-buffer][Splash screen and scratch buffer]]
  - [[#visual-line-mode][Visual line mode]]
  - [[#set-defualt-fonts][Set defualt fonts]]
  - [[#line-numbers-for-certain-modes][Line numbers for certain modes]]
- [[#package-management][Package management]]
  - [[#table-of-content-in-org-mode-package][Table of content in org mode package]]
  - [[#doom-themes-and-doom-modeline][doom-themes and doom-modeline]]
- [[#the-org-mode][THE *ORG* MODE]]

* gnuEmacs :noexport:
#+PROPERTY: header-args :tangle init-test.el
The time to start using /Emacs/ has finally arrived. /Emacs/ is not just a text editor, it is everything you can imagine. It can open web pages, read your email, organize your life and alot more.But I don't use it for these great features, my only motive to start learning and using /Emacs/ is its great capability of handling Arabic texts.The main configuration file is =init.el= and over time it will increase in size as I learn more about this great peice of software and add more stuff to it.I don't know anything about the Lisp language and I don't claim to know it but I'll be looking at the documentation and reading about the /Emacs/ lisp to make it great.I know what other /Emacs/ users say about Org mode and it is the killer feature of /Emacs/, but for me it still very early to judge if this claim is true or not.

* UI tweaks and customization
In this section we'll remove some of the UI elements to make it cleaner
**  No menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

**  No tools bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

**  No scroll bars
In the case of scroll bars we define a custom function to disable them for each new frame
#+BEGIN_SRC emacs-lisp
(defun nt/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'nt/disable-scroll-bars)
#+END_SRC

**  No tab bar
In the case of tab bar we define a custom function to disable it for each new frame
#+BEGIN_SRC emacs-lisp
(defun nt/disable-tab-bar (frame)
  (modify-frame-parameters frame
                           '((tab-bar-mode . -1))))
(add-hook 'after-make-frame-functions 'nt/disable-tab-bar)
#+END_SRC

** Splash screen and scratch buffer
Start a clean and empty new buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t) 
(setq initial-scratch-message nil)
#+END_SRC

** Visual line mode
By default, /Emacs/ does not wrap the text when you reach the end of screen while writing a long line, we can change this behaviour by setting the visual-line-mode.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode)
#+END_SRC
To add a space between lines in order to make it easier to read we add the following code block
#+BEGIN_SRC emacs-lisp
(setq-default line-spacing 8)
#+END_SRC

** Set defualt fonts
Since /Emacs/ is a graphical application, we can define different fonts for different sections of our document. Personally, I like to have the parts that belong to a snippent of code with a monospace fonts and the other sections of the document to be with a variable width font. This gives me the ability to easily distinguish them and make it easier for editing a long document.

/Emacs/ uses face to describe fonts,  so let's set the default font for every instance of /Emacs/
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "FantasqueSansMono Nerd Font" :height 141 )
#+END_SRC
This code block works well when we're using /Emacs/ as a standalone program, but if we want to use it as a daemon, we need to tell /Emacs/ to set the default font for every new buffer that gets created
#+BEGIN_SRC emacs-lisp
(setq default-frame-alist '((font . "FantasqueSansMono Nerd Font" )
			    (height . 141 )))
#+END_SRC
*** Esc key
By default /Emacs/ uses =Esc Esc Esc= to quit the mini buffer, which is annoying for someone coming from /Vim/. We can change this behaviour by binding it to a single =Esc=

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>")      'keyboard-escape-quit)
#+END_SRC
To be able to use a different font for the variable width blocks we need to use a package that tells /Emacs/ what sections are normal text and what are code blocks, the package I use is called mixed-pitch and we can install it from melpa.

Since we did't install any package manager yet, the code block for this package will be added after the package manager.
** Line numbers for certain modes
Having the lines number at the left of the frame is important to be able to nagivate fast to the required section of the document, but we don't want it to be active in all mode, e.g. we don't want the line numbers to be enable in the term-mode
#+BEGIN_SRC emacs-lisp
(defcustom display-line-numbers-exempt-modes
  '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
  "Major modes on which to disable line numbers."
  :group 'display-line-numbers
  :type 'list
  :version "green")

;; Line numbers for specific modes
(defun display-line-numbers--turn-on ()
  "Turn on line numbers except for certain major modes.
Exempt major modes are defined in `display-line-numbers-exempt-modes'."
  (unless (or (minibufferp)
              (member major-mode display-line-numbers-exempt-modes))
    (display-line-numbers-mode)))
#+END_SRC
* Package management
To be able to customize /Emacs/ to our heart content we need to install some extra packages that enhance the overall experience of it. First we have to add support for package management in /Emacs/. We'll install our packages from the offical elpa repo and third-party melpa repo. Also, we can use /use-package/ to further fine tune the installed packages.
** Table of content in org mode package
To exclude a heading from the TOC add =:noexport:= and for exporting only the first level heading, add =:noexport_1:= to the heading
#+BEGIN_SRC emacs-lisp
(if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      (add-hook 'markdown-mode-hook 'toc-org-mode)
      (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))
  (warn "toc-org not found"))
#+END_SRC
** doom-themes and doom-modeline
The default theme used in /Emacs/ is blinding white which I don't personally like, /Emacs/ has some nice themes to choose from, but we can take it one step further and use the doom-themes and doom-modeline packages to have a wide range of themes
#+BEGIN_SRC emacs-lisp
 ;; Enable the fancy doom themes
#(use-package doom-themes
   :ensure t
   :config
   ;; Global settings (defaults)
   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	 doom-themes-enable-italic t) ; if nil, italics is universally disabled
   (load-theme 'doom-material-dark t)

   ;; Enable flashing mode-line on errors
   (doom-themes-visual-bell-config)
   ;; Enable custom neotree theme (all-the-icons must be installed!)
   (doom-themes-neotree-config)
   ;; or for treemacs users
   (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
   (doom-themes-treemacs-config)
   ;; Corrects (and improves) org-mode's native fontification.
   (doom-themes-org-config))

 (use-package doom-modeline
   :ensure t
   :hook (after-init . doom-modeline-mode))
 (setq doom-modeline-height 18)
#+END_SRC
And we can enable the line and column numbers in the modeline
#+BEGIN_SRC emacs-lisp
 (require 'display-line-numbers)
 #+END_SRC
* THE *ORG* MODE
/Emacs/ without THE *ORG* mode is not /Emacs/
